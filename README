Trial Day (Senior, Java, SpringBoot, ElasticSearch):
Emergency Services Dashboard with Real-Time Search Capabilities

0. Objective:

Develop a Java application using Spring Boot that acts as an emergency services dashboard. The application should
interact with ElasticSearch to log and query real-time emergency incidents.


1. Implemented features:

a. endpoint "<host>/incidents/log" available to create new incidents
b. Unit-test for low-level ES client (incident creation)
c. API-tests for "/incidents/log" (positive & negative test cases)

2. Missing features:

a. No serialization using Hibernate - all data goes directly into ES
b. No WebSocket integration
c. No UI
d. No dockerization


3. Setup guide

a. Create a docker container running ES version 8.10.2 with default security settings:
    docker pull docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    docker run --name elasticsearch -d -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:8.10.2
b. Create a new password for the user "elastic":
    docker exec -it elasticsearch /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic
    [confirm question with enter]
c. Overwrite the value of key "es.password" in file "src/main/resources/application.properties" with
   new password acquired in step b
d. Copy the certificate file into "src/main/resources":
    [move into directory "src/main/resources"]
    docker cp elasticsearch:/usr/share/elasticsearch/config/certs/http_ca.crt .
e. Now test basic setup and functionality:
    [move into project directory]
    mvnw clean test
f. When tests have finished successfully, the ES connection is working. Start the application:
    mvnw spring-boot:run
g. Now the endpoint "http://localhost:8080/incidents/logs" is available
